name : Slack Notification Workflow
on: 
   workflow_run: 
     workflows : ['Release Workflow']
     types:
       - completed


jobs:

  slack_notification:
    runs-on: ubuntu-latest
    name: Post Slack Notification
    permissions:
         actions : read
    steps:   
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Get Branch Name
      id: branch_name
      run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
      
    - name: Check if version.json file exists
      id: check-file
      uses : andstor/file-existence-action@v2
      with:
          files: "version.json"
          
    - name: Read version.json
      id: version
      if: steps.check-file.outputs.files_exists == 'true'
      uses: juliangruber/read-file-action@v1
      with:
        path: version.json
        
#     - name : Notify Slack (Inprogress)
#       id : slack_notify
#       env:
#         SLACK_WEBHOOK_URL: "https://password-v2.tpsec.co/show/f332e053ca2457d54fce68e8ae4ad7abcb01e53f5c5058a85e86f3f85e6833f9/TmU0bmppcmxOSUtwbHVVUVJyWXhCdz09/QlduMVlidllpb2p4eWVKWjNFcG5WSlZZdkJicVRxZ3ZlZis2cUlLQTBacz0="
#       uses: slackapi/slack-github-action@v1.24.0
#       with:
#         channel-id: 'C059HLPGUN8' # Test Channel Id
#         payload: | 
#                  {
#                    "text": "Hey <!subteam^S014W2U4MPY>",
#                    "attachments": [
#                       {
#                         "pretext": "*_WebApp ${{ fromJSON(steps.version.outputs.content).monorepo }}_* is in Staging! :rocket: :tada:",
#                         "color": "dbab09",
#                         "fields": [
#                           {
#                             "title": "Deployment",
#                             "short": true,
#                             "value": "InProgress"
#                           },
#                           {
#                             "type" : "divider"
#                           },

#                             {
#                              "title": "Repository",
#                              "short": true,
#                              "value": "${{github.repository}}"
#                            },
#                            {
#                             "type" : "divider"
#                           },
                         
#                            {
#                              "title" : "Branch",
#                              "short" : true,
#                              "value" : "${{steps.branch_name.outputs.branch}}"
#                            },
#                            {
#                             "type" : "divider"
#                           },
                          
#                            {
#                             "title": "Commit URL",
#                             "short": true,
#                             "value": "https://github.com/${{github.repository}}/commit/${{github.sha}}"
#                           }
#                         ]
#                       }
#                      ]
#                   }
      
        
    - name : Jobs API
      if: ${{github.event.workflow_run.conclusion == 'failure'}}
      id : jobs_api
      run : |
           response=$(curl -s \
              -X GET \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{github.token}}"\
              ${{github.event.workflow_run.jobs_url}} | jq -r '.jobs' | jq -c .)
              
            echo "::set-output name=response::$response"
            
    - name : Get Failed Job
      id : failed_job
      if: ${{github.event.workflow_run.conclusion == 'failure'}}
      run : |
            node -e '
            let failed_job = {
              link : "",
              step : ""
            }
            const jobs = JSON.parse(process.env.JOBS_API_RESPONSE);
            for(let {status,conclusion,html_url,steps} of jobs) {
              if(status === "completed" && conclusion === "failure") {
                failed_job.link = html_url;
              };
              if(steps.length > 0) {
                for(let step of steps) {
                  if(step.conclusion === "failure") {
                    failed_job.step = step.name;
                  }
                }
              }
            }
            process.stdout.write(`::set-output name=failed_job::${JSON.stringify(failed_job)}`);
            '
      env:
          JOBS_API_RESPONSE: ${{steps.jobs_api.outputs.response}}
          
    - name: Send Slack Success Notification
      if: ${{github.event.workflow_run.conclusion == 'success'}}
      env:
        SLACK_WEBHOOK_URL: "https://password-v2.tpsec.co/show/f332e053ca2457d54fce68e8ae4ad7abcb01e53f5c5058a85e86f3f85e6833f9/TmU0bmppcmxOSUtwbHVVUVJyWXhCdz09/QlduMVlidllpb2p4eWVKWjNFcG5WSlZZdkJicVRxZ3ZlZis2cUlLQTBacz0="
      uses: slackapi/slack-github-action@v1.24.0
      with:
        channel-id: 'C059HLPGUN8' # Test Channel Id
        update-ts : ${{steps.slack_notify.outputs.ts}}
        payload: | 
                 {
                   "text": "Hey <!subteam^S014W2U4MPY>",
                   "attachments": [
                      {
                        "pretext": "*_WebApp ${{ fromJSON(steps.version.outputs.content).monorepo }}_* is in Staging! :rocket: :tada:",
                        "color": "28a745",
                        "fields": [
                          {
                            "title": "Deployment",
                            "short": true,
                            "value": "Success"
                          },
                          {
                            "type" : "divider"
                          },

                            {
                             "title": "Repository",
                             "short": true,
                             "value": "${{github.repository}}"
                           },
                           {
                            "type" : "divider"
                          },
                         
                           {
                             "title" : "Branch",
                             "short" : true,
                             "value" : "${{steps.branch_name.outputs.branch}}"
                           },
                           {
                            "type" : "divider"
                          },
                          
                           {
                            "title": "Commit URL",
                            "short": true,
                            "value": "https://github.com/${{github.repository}}/commit/${{github.sha}}"
                          }
                        ]
                      }
                     ]
                  }
                  
    - name: Send Slack Failure Notification
      if: ${{github.event.workflow_run.conclusion == 'failure'}}
      env:
        SLACK_WEBHOOK_URL: "https://password-v2.tpsec.co/show/f332e053ca2457d54fce68e8ae4ad7abcb01e53f5c5058a85e86f3f85e6833f9/TmU0bmppcmxOSUtwbHVVUVJyWXhCdz09/QlduMVlidllpb2p4eWVKWjNFcG5WSlZZdkJicVRxZ3ZlZis2cUlLQTBacz0="
      uses: slackapi/slack-github-action@v1.24.0
      with:
         channel-id: 'C059HLPGUN8' # test channel id
         update-ts : ${{steps.slack_notify.outputs.ts}}
         payload: |
                  {
                    "text": "Hey <!subteam^S014W2U4MPY>",
                    "attachments" : [
                      {
                        "pretext": "",
                        "color": "FF0000",
                        "fields": [
                          {
                            "title": "Deployment",
                            "short": true,
                            "value": "Failed"
                          },
                          {
                            "type" : "divider"
                          },
                           {
                             "title": "Repository",
                             "short": true,
                             "value": "${{github.repository}}"
                           },
                           {
                            "type" : "divider"
                          },
                           {
                             "title" : "Branch",
                             "short" : true,
                             "value" : "${{steps.branch_name.outputs.branch}}"
                           },
                           {
                            "type" : "divider"
                          },
                           {
                             "title" : "Failed Step",
                             "short" : true,
                             "value" : "${{fromJSON(steps.failed_job.outputs.failed_job).step}}"
                           },
                            {
                            "type" : "divider"
                          },
                           {
                             "title": "Failed Job URL",
                             "short": true,
                             "value": "${{fromJSON(steps.failed_job.outputs.failed_job).link}}"
                           }
                        ]
                      }
                    ]
                  }
